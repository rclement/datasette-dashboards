name: CI/CD

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  DEMO_BASE_URL_PREVIEW: dd-demo.vercel.app
  DEMO_BASE_URL_PRODUCTION: datasette-dashboards-demo.vercel.app

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Run linting
        run: |
          pipenv run black --check datasette_dashboards tests
          pipenv run flake8 datasette_dashboards tests
          pipenv run mypy datasette_dashboards tests
      - name: Run tests
        run: |
          pipenv run pytest -v --cov=datasette_dashboards --cov=tests --cov-branch --cov-report=term-missing tests
          pipenv run coverage xml
      - name: Publish code coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  deploy-demo-setup:
    name: Deployment setup
    runs-on: ubuntu-latest
    needs: test

    outputs:
      github_ref_slug: ${{ steps.output_step.outputs.github_ref_slug }}
      deployment_url: ${{ steps.output_step.outputs.deployment_url }}

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Set preview deployment url variable
        if: ${{ !contains(github.ref, 'master') && !contains(github.ref, 'tags') }}
        run: echo "DEPLOYMENT_URL=https://${GITHUB_REF_SLUG_URL}-${DEMO_BASE_URL_PREVIEW}" >> ${GITHUB_ENV}
      - name: Set production deployment url variable
        if: ${{ contains(github.ref, 'master') }}
        run: echo "DEPLOYMENT_URL=https://${DEMO_BASE_URL_PRODUCTION}" >> ${GITHUB_ENV}
      - id: output_step
        run: |
          echo "github_ref_slug=${GITHUB_REF_SLUG_URL}" >> $GITHUB_OUTPUT
          echo "deployment_url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT

  deploy-demo-preview:
    runs-on: ubuntu-latest
    needs: [deploy-demo-setup]
    if: ${{ github.event_name == 'push' && !contains(github.ref, 'master') && !contains(github.ref, 'tags') }}

    environment:
      name: preview/${{ needs.deploy-demo-setup.outputs.github_ref_slug }}
      url: ${{ needs.deploy-demo-setup.outputs.deployment_url }}

    steps:
      - uses: actions/checkout@v3
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Deploy to Vercel
        run: |-
          VERCEL_ALIAS=${GITHUB_REF_SLUG_URL}-${DEMO_BASE_URL_PREVIEW}
          VERCEL_URL=$(pipenv run datasette publish vercel demo/jobs.db \
            --metadata demo/metadata.yml \
            --template-dir demo/templates \
            --install=datasette-cluster-map \
            --install=datasette-vega \
            --install=datasette-block-robots \
            --install=https://github.com/rclement/datasette-dashboards/archive/${GITHUB_SHA}.zip \
            --project=${{ secrets.VERCEL_PROJECT }} \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --no-prod)
          vercel alias --token ${{ secrets.VERCEL_TOKEN }} set ${VERCEL_URL} ${VERCEL_ALIAS}

  deploy-demo-production:
    runs-on: ubuntu-latest
    needs: [deploy-demo-setup]
    if: contains(github.ref, 'master')

    environment:
      name: demo
      url: ${{ needs.deploy-demo-setup.outputs.deployment_url }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Deploy to Vercel
        run: |-
          pipenv run datasette publish vercel demo/jobs.db \
            --metadata demo/metadata.yml \
            --template-dir demo/templates \
            --install=datasette-cluster-map \
            --install=datasette-vega \
            --install=datasette-block-robots \
            --install=https://github.com/rclement/datasette-dashboards/archive/${GITHUB_SHA}.zip \
            --project=${{ secrets.VERCEL_PROJECT }} \
            --token=${{ secrets.VERCEL_TOKEN }}

  publish-package-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: contains(github.ref, 'master')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-publish-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-publish-pip-
      - name: Install dependencies
        run: |
          pip install setuptools wheel twine
      - name: Publish package on PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_TEST }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload -r testpypi dist/*

  publish-package:
    runs-on: ubuntu-latest
    needs: [test]
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-publish-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-publish-pip-
      - name: Install dependencies
        run: |
          pip install setuptools wheel twine
      - name: Publish package on PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

  take-shots:
    runs-on: ubuntu-latest
    needs: [deploy-demo-production]
    if: contains(github.ref, 'master')

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright/
          key: ${{ runner.os }}-playwright
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade shot-scraper
          shot-scraper install
      - name: Demo dashboard screenshot
        run: |
          shot-scraper \
            "https://${DEMO_BASE_URL_PRODUCTION}/-/dashboards/job-offers-stats?date_start=2021-01-01&date_end=2021-05-01&source=&region=" \
            --output demo/datasette-dashboards-demo.png \
            --wait 1000 \
            --width 1440 \
            --retina
      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: demo/datasette-dashboards-demo.png
      # - name: Commit and push changes
      #   run: |
      #     git config user.name "Automated"
      #     git config user.email "actions@users.noreply.github.com"
      #     git add -A
      #     timestamp=$(date -u)
      #     git commit -m "Latest data: ${timestamp}" || exit 0
      #     git push
