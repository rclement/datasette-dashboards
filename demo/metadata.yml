title: Datasette Dashboards Demo
about: rclement/datasette-dashboards
about_url: https://github.com/rclement/datasette-dashboards
description_html: |-
  <div class="message-info">
    <p>Welcome to the <a href="https://github.com/rclement/datasette-dashboards">Datasette Dashboards plugin</a> demo!</p>
    <ul class="bullets">
      <li>Browse dashboards at <a href="/-/dashboards">/-/dashboards</a></li>
      <li>See an example of an embedded dashboard within a custom page at <a href="/embedded_dashboard">/embedded_dashboard</a></li>
      <li>See an example of an embedded chart within a custom page at <a href="/embedded_chart">/embedded_chart</a></li>
    </ul>
  </div>

databases:
  jobs:
    tables:
      offers_view:
        fts_table: offers_fts
        fts_pk: id
        searchmode: raw

plugins:
  datasette-sqlite-http:
    UNSAFE_allow_http_requests: true

  datasette-dashboards:
    job-offers-stats:
      title: Job offers statistics
      description: Gather metrics about job offers
      settings:
        allow_fullscreen: true
        autorefresh: 1
      layout:
        - [analysis-note, offers-day, offers-day, offers-count]
        - [analysis-note, offers-source, offers-day-source, offers-region]
        - [job-titles, offers-map, latest-offers, latest-offers]
      filters:
        date_start:
          name: Date Start
          type: date
          default: "2021-01-01"
        date_end:
          name: Date End
          type: date
        source:
          name: Source
          type: select
          options: [Apec, RegionsJob, Indeed]
        region:
          name: Region
          type: select
          db: jobs
          query: SELECT DISTINCT region FROM offers_view WHERE region IS NOT NULL ORDER BY region ASC
        company:
          name: Company
          type: select
          db: jobs
          query: SELECT DISTINCT company FROM offers_view WHERE company IS NOT NULL ORDER BY company ASC
        job_title:
          name: Job Title
          type: text
      charts:
        analysis-note:
          library: markdown
          display: |-
            # Analysis details

            We wanted to analyze data from job offers, using the **`python` search keyword**
            from three sources of job-boards:
            [APEC](https://www.apec.fr),
            [Indeed](https://fr.indeed.com/) and
            [RegionsJob](https://regionsjob.com).

            ## Process

            The process was in 3 steps:

            - Extraction
            - Transformation
            - Loading

            After the ETL process, an extra data enrichment step was developed to provide
            location geocoding, based on place names.

            ## SQL query

            ```sql
            SELECT
              date(date) as day,
              count(*) as count
            FROM offers_view
            GROUP BY day
            ORDER BY day
            ```

        offers-count:
          title: Total number of offers
          db: jobs
          query: >-
            SELECT count(*) as count
            FROM offers_view
            WHERE TRUE
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND source = :source ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
          library: metric
          display:
            field: count
            prefix:
            suffix: " offers"

        offers-day:
          title: Number of offers by day
          db: jobs
          query: >-
            SELECT
              date(date) as day,
              count(*) as count
            FROM offers_view
            WHERE TRUE
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND source = :source ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
            GROUP BY day
            ORDER BY day
          library: vega-lite
          display:
            mark: { type: line, tooltip: true }
            encoding:
              x: { field: day, type: temporal, timeUnit: yearmonthdate }
              y: { field: count, type: quantitative }

        offers-source:
          title: Number of offers by source
          db: jobs
          query: >-
            SELECT
              source,
              count(*) as count
            FROM offers_view
            WHERE TRUE
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
            GROUP BY source
            ORDER BY count DESC
          library: vega-lite
          display:
            mark: { type: arc, tooltip: true }
            params:
              - name: highlight
                select: { fields: [source], type: point, "on": mouseover }
                bind: legend
            encoding:
              color: { field: source, type: nominal }
              theta: { field: count, type: quantitative }
              opacity:
                condition: { param: highlight, value: 1 }
                value: 0.2

        offers-day-source:
          title: Offers by day by source
          db: jobs
          query: >-
            SELECT
              date(date) as day,
              source,
              count(*) as count
            FROM offers_view
            WHERE TRUE
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
            GROUP BY day, source
            ORDER BY day
          library: vega-lite
          display:
            mark: { type: bar, tooltip: true }
            params:
              - name: highlight
                select: { fields: [source], type: point, "on": mouseover }
                bind: legend
            encoding:
              x: { field: day, type: ordinal, timeUnit: yearmonthdate }
              y: { field: count, type: quantitative }
              color: { field: source, type: nominal }
              opacity:
                condition: { param: highlight, value: 1 }
                value: 0.2

        offers-region:
          title: Offers by region
          db: jobs
          query: >-
            WITH regions AS (
              SELECT
                value ->> '$.properties.code' AS code,
                value ->> '$.properties.nom' AS name
              FROM
                json_each(
                  http_get_body(
                    'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions.geojson'
                  ) -> '$.features'
                )
            ),
            region_offers AS (
              SELECT
                region,
                count(*) as count
              FROM
                offers_view
              WHERE
                TRUE
                [[ AND date >= date(:date_start) ]]
                [[ AND date <= date(:date_end) ]]
                [[ AND source = :source ]]
                [[ AND region = :region ]]
                [[ AND company = :company ]]
                [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
              GROUP BY
                region
            )
            SELECT
              regions.name AS region,
              coalesce(region_offers.count, 0) AS count
            FROM
              regions
              LEFT OUTER JOIN region_offers on region_offers.region = regions.name
            ORDER BY
              region_offers.count DESC
          library: vega-lite
          display:
            mark: geoshape
            projection: { type: mercator }
            transform:
              - lookup: region
                from:
                  data:
                    url: https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions.geojson
                    format: { type: json, property: features }
                  key: properties.nom
                  fields: [type, geometry]
            encoding:
              fill:
                field: count
                type: quantitative
                scale: { scheme: blues }
              stroke: { value: white }
              tooltip:
                - { field: region, type: nominal }
                - { field: count, type: quantitative }

        job-titles:
          title: Word cloud of job titles
          db: jobs
          query: >-
            SELECT
              b.value AS word,
              COUNT(*) AS frequency
            FROM (
                SELECT '["' || lower(replace(trim(title), ' ', '", "')) || '"]' AS array
                FROM offers_view
                WHERE TRUE
                  [[ AND date >= date(:date_start) ]]
                  [[ AND date <= date(:date_end) ]]
                  [[ AND source = :source ]]
                  [[ AND region = :region ]]
                  [[ AND company = :company ]]
                  [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
              ) a,
              json_each(a.array) b
            WHERE length(b.value) > 3
            GROUP BY b.value
            ORDER BY frequency DESC
            LIMIT 100
          library: vega
          display:
            height: 150
            scales:
              - name: color
                type: ordinal
                domain: { data: table, field: word }
                range: ["#d5a928", "#652c90", "#939597"]
            marks:
              - type: text
                from: { data: table }
                encode:
                  enter:
                    text: { field: word }
                    align: { value: center }
                    baseline: { value: alphabetic }
                    fill: { scale: color, field: "word" }
                  update:
                    fillOpacity: { value: 1 }
                  hover:
                    fillOpacity: { value: 0.5 }
                transform:
                  - type: wordcloud
                    size: [{ signal: width }, { signal: height }]
                    text: { field: word }
                    rotate: 0
                    font: Helvetica Neue, Arial
                    fontSize: { field: datum.frequency }
                    fontWeight: "300"
                    fontSizeRange: [12, 56]
                    padding: 2

        latest-offers:
          title: Latest offers
          db: jobs
          query: >-
            SELECT
              date(date) as Date,
              title as Title,
              company as Company,
              '<a href="' || url || '">' || source || '</a>' as Link
            FROM offers_view
            WHERE TRUE
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND source = :source ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
            ORDER BY date DESC
            LIMIT 5
          library: table
          display:

        offers-map:
          title: Offers map
          db: jobs
          query: >-
            SELECT
              date(date) as Date,
              title as Title,
              company as Company,
              source as Source,
              city as City,
              longitude,
              latitude
            FROM offers_view
            WHERE longitude IS NOT NULL AND latitude IS NOT NULL
              [[ AND date >= date(:date_start) ]]
              [[ AND date <= date(:date_end) ]]
              [[ AND source = :source ]]
              [[ AND region = :region ]]
              [[ AND company = :company ]]
              [[ AND id IN (SELECT rowid FROM offers_fts WHERE offers_fts MATCH :job_title) ]]
          library: map
          display:
